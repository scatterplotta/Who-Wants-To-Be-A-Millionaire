import random
import time
import sys

class MillionaireGame:
    def __init__(self):
        self.money_levels = [
            100, 200, 300, 500, 1000, 2000, 4000, 8000, 
            16000, 32000, 64000, 125000, 250000, 500000, 1000000
        ]
        
        self.lifelines = {
            "50/50": True,
            "Phone a Friend": True,
            "Ask the Audience": True
        }
        
        self.current_question = 0
        self.current_winnings = 0
        
        # Question bank organized by difficulty and theme
        self.questions = {
            # Easy questions (1-5)
            1: [
                {"theme": "Literature", "question": "Who wrote 'Romeo and Juliet'?", 
                 "answers": ["A) Charles Dickens", "B) William Shakespeare", "C) Mark Twain", "D) Jane Austen"], 
                 "correct": "B"},
                
                {"theme": "Sports", "question": "How many players are on a basketball team on the court at one time?", 
                 "answers": ["A) 4", "B) 5", "C) 6", "D) 7"], 
                 "correct": "B"},
                
                {"theme": "Geography", "question": "What is the capital of France?", 
                 "answers": ["A) London", "B) Berlin", "C) Paris", "D) Madrid"], 
                 "correct": "C"},
                
                {"theme": "Science", "question": "What gas do plants absorb from the atmosphere?", 
                 "answers": ["A) Oxygen", "B) Nitrogen", "C) Carbon Dioxide", "D) Hydrogen"], 
                 "correct": "C"},
                
                {"theme": "History", "question": "In which year did World War II end?", 
                 "answers": ["A) 1944", "B) 1945", "C) 1946", "D) 1947"], 
                 "correct": "B"}
            ],
            
            2: [
                {"theme": "Literature", "question": "Which novel begins with 'Call me Ishmael'?", 
                 "answers": ["A) Moby Dick", "B) The Great Gatsby", "C) Pride and Prejudice", "D) 1984"], 
                 "correct": "A"},
                
                {"theme": "Sports", "question": "Which country has won the most FIFA World Cups?", 
                 "answers": ["A) Germany", "B) Argentina", "C) Italy", "D) Brazil"], 
                 "correct": "D"},
                
                {"theme": "Geography", "question": "Which is the longest river in the world?", 
                 "answers": ["A) Amazon", "B) Nile", "C) Mississippi", "D) Yangtze"], 
                 "correct": "B"},
                
                {"theme": "Science", "question": "What is the chemical symbol for gold?", 
                 "answers": ["A) Go", "B) Gd", "C) Au", "D) Ag"], 
                 "correct": "C"},
                
                {"theme": "History", "question": "Who was the first person to walk on the moon?", 
                 "answers": ["A) Buzz Aldrin", "B) Neil Armstrong", "C) John Glenn", "D) Alan Shepard"], 
                 "correct": "B"}
            ],
            
            3: [
                {"theme": "Literature", "question": "Who wrote 'One Hundred Years of Solitude'?", 
                 "answers": ["A) Pablo Neruda", "B) Gabriel Garc√≠a M√°rquez", "C) Mario Vargas Llosa", "D) Jorge Luis Borges"], 
                 "correct": "B"},
                
                {"theme": "Sports", "question": "In tennis, what does 'love' mean?", 
                 "answers": ["A) A perfect shot", "B) Zero points", "C) Match point", "D) A tie"], 
                 "correct": "B"},
                
                {"theme": "Geography", "question": "Which African country was never colonized?", 
                 "answers": ["A) Kenya", "B) Nigeria", "C) Ethiopia", "D) Ghana"], 
                 "correct": "C"},
                
                {"theme": "Science", "question": "What is the hardest natural substance on Earth?", 
                 "answers": ["A) Quartz", "B) Diamond", "C) Granite", "D) Iron"], 
                 "correct": "B"},
                
                {"theme": "History", "question": "The Berlin Wall fell in which year?", 
                 "answers": ["A) 1987", "B) 1988", "C) 1989", "D) 1990"], 
                 "correct": "C"}
            ],
            
            # Medium questions (4-8)
            4: [
                {"theme": "Literature", "question": "Which Shakespeare play features the character Iago?", 
                 "answers": ["A) Hamlet", "B) Macbeth", "C) Othello", "D) King Lear"], 
                 "correct": "C"},
                
                {"theme": "Sports", "question": "What is the maximum score possible in ten-pin bowling?", 
                 "answers": ["A) 200", "B) 250", "C) 300", "D) 350"], 
                 "correct": "C"},
                
                {"theme": "Geography", "question": "Which country has the most time zones?", 
                 "answers": ["A) Russia", "B) USA", "C) China", "D) Canada"], 
                 "correct": "A"},
                
                {"theme": "Science", "question": "What is the most abundant gas in Earth's atmosphere?", 
                 "answers": ["A) Oxygen", "B) Carbon Dioxide", "C) Nitrogen", "D) Argon"], 
                 "correct": "C"},
                
                {"theme": "History", "question": "Which ancient wonder of the world was located in Alexandria?", 
                 "answers": ["A) Hanging Gardens", "B) Colossus of Rhodes", "C) Lighthouse of Alexandria", "D) Statue of Zeus"], 
                 "correct": "C"}
            ],
            
            5: [
                {"theme": "Literature", "question": "Who wrote 'The Picture of Dorian Gray'?", 
                 "answers": ["A) Oscar Wilde", "B) Bram Stoker", "C) Arthur Conan Doyle", "D) H.G. Wells"], 
                 "correct": "A"},
                
                {"theme": "Sports", "question": "Which Formula 1 driver has won the most championships?", 
                 "answers": ["A) Ayrton Senna", "B) Michael Schumacher", "C) Lewis Hamilton", "D) Sebastian Vettel"], 
                 "correct": "B"},
                
                {"theme": "Geography", "question": "What is the smallest country in the world?", 
                 "answers": ["A) Monaco", "B) San Marino", "C) Vatican City", "D) Liechtenstein"], 
                 "correct": "C"},
                
                {"theme": "Science", "question": "What particle is known as the 'God particle'?", 
                 "answers": ["A) Electron", "B) Proton", "C) Neutron", "D) Higgs boson"], 
                 "correct": "D"},
                
                {"theme": "History", "question": "Which empire was ruled by Justinian I?", 
                 "answers": ["A) Roman Empire", "B) Byzantine Empire", "C) Ottoman Empire", "D) Persian Empire"], 
                 "correct": "B"}
            ],
            
            # Hard questions (6-10)
            6: [
                {"theme": "Literature", "question": "In which James Joyce novel does Leopold Bloom appear?", 
                 "answers": ["A) Dubliners", "B) A Portrait of the Artist", "C) Ulysses", "D) Finnegans Wake"], 
                 "correct": "C"},
                
                {"theme": "Sports", "question": "In golf, what is an albatross?", 
                 "answers": ["A) Two under par", "B) Three under par", "C) Four under par", "D) A hole-in-one"], 
                 "correct": "B"},
                
                {"theme": "Geography", "question": "Which strait separates Europe and Africa?", 
                 "answers": ["A) Strait of Hormuz", "B) Strait of Gibraltar", "C) Bosphorus Strait", "D) Strait of Malacca"], 
                 "correct": "B"},
                
                {"theme": "Science", "question": "What is the name of the theoretical boundary around a black hole?", 
                 "answers": ["A) Photon sphere", "B) Schwarzschild radius", "C) Event horizon", "D) Singularity"], 
                 "correct": "C"},
                
                {"theme": "History", "question": "The Treaty of Westphalia ended which war?", 
                 "answers": ["A) Hundred Years' War", "B) Thirty Years' War", "C) Seven Years' War", "D) War of Spanish Succession"], 
                 "correct": "B"}
            ],
            
            # Very Hard questions (11-15)
            11: [
                {"theme": "Literature", "question": "Who wrote 'The Master and Margarita'?", 
                 "answers": ["A) Leo Tolstoy", "B) Fyodor Dostoevsky", "C) Mikhail Bulgakov", "D) Anton Chekhov"], 
                 "correct": "C"},
                
                {"theme": "Sports", "question": "Which horse won the Triple Crown in 1973?", 
                 "answers": ["A) Seattle Slew", "B) Affirmed", "C) Citation", "D) Secretariat"], 
                 "correct": "D"},
                
                {"theme": "Geography", "question": "Which is the highest unclimbed mountain in the world?", 
                 "answers": ["A) Gangkhar Puensum", "B) Muchu Chhish", "C) Kabru", "D) Labuche Kang"], 
                 "correct": "A"},
                
                {"theme": "Science", "question": "What is the name of the effect where time dilates due to gravity?", 
                 "answers": ["A) Doppler effect", "B) Gravitational time dilation", "C) Hawking radiation", "D) Quantum entanglement"], 
                 "correct": "B"},
                
                {"theme": "History", "question": "Who was the last Byzantine Emperor?", 
                 "answers": ["A) John VIII Palaiologos", "B) Constantine XI Palaiologos", "C) Manuel II Palaiologos", "D) John VII Palaiologos"], 
                 "correct": "B"}
            ]
        }

    def display_title(self):
        print("\n" + "="*60)
        print("üéØ WHO WANTS TO BE A MILLIONAIRE? üéØ")
        print("="*60)
        print("Themes: Literature üìö | Sports ‚öΩ | Geography üåç | Science üß™ | History üèõÔ∏è")
        print("="*60 + "\n")

    def display_money_ladder(self):
        print("\nüí∞ MONEY LADDER:")
        print("-" * 20)
        for i, amount in enumerate(reversed(self.money_levels)):
            if i == len(self.money_levels) - 1 - self.current_question:
                print(f"‚ñ∫ ${amount:,}")
            else:
                print(f"  ${amount:,}")
        print("-" * 20)

    def display_lifelines(self):
        print("\nüÜò LIFELINES AVAILABLE:")
        for lifeline, available in self.lifelines.items():
            status = "‚úÖ" if available else "‚ùå"
            print(f"{status} {lifeline}")

    def use_lifeline(self, q_data):
        print("\nWhich lifeline would you like to use?")
        available_lifelines = [k for k, v in self.lifelines.items() if v]
        
        if not available_lifelines:
            print("No lifelines available!")
            return False
        
        for i, lifeline in enumerate(available_lifelines, 1):
            print(f"{i}. {lifeline}")
        print(f"{len(available_lifelines) + 1}. Cancel")
        
        try:
            choice = int(input("\nEnter your choice: "))
            if choice == len(available_lifelines) + 1:
                return False
            
            selected_lifeline = available_lifelines[choice - 1]
            self.lifelines[selected_lifeline] = False
            
            if selected_lifeline == "50/50":
                self.fifty_fifty(q_data)
            elif selected_lifeline == "Phone a Friend":
                self.phone_friend(q_data)
            elif selected_lifeline == "Ask the Audience":
                self.ask_audience(q_data)
            
            return True
            
        except (ValueError, IndexError):
            print("Invalid choice!")
            return False

    def fifty_fifty(self, q_data):
        correct_answer = q_data["correct"]
        answers = q_data["answers"].copy()
        
        # Remove two wrong answers
        wrong_answers = [ans for ans in answers if not ans.startswith(correct_answer)]
        random.shuffle(wrong_answers)
        
        for _ in range(2):
            if wrong_answers:
                answers.remove(wrong_answers.pop())
        
        print("\nüîÑ 50/50 used! Two wrong answers removed:")
        for ans in answers:
            print(ans)

    def phone_friend(self, q_data):
        friends = ["Sarah", "Mike", "Dr. Johnson", "Professor Smith", "Alex"]
        friend = random.choice(friends)
        
        # Friend has 70% chance to be right, with higher accuracy for easier questions
        accuracy = 0.9 - (self.current_question * 0.05)
        
        if random.random() < accuracy:
            suggestion = q_data["correct"]
        else:
            wrong_options = ["A", "B", "C", "D"]
            wrong_options.remove(q_data["correct"])
            suggestion = random.choice(wrong_options)
        
        confidence = random.randint(60, 95)
        
        print(f"\nüìû Calling {friend}...")
        time.sleep(2)
        print(f"{friend}: I'm {confidence}% confident the answer is {suggestion}.")

    def ask_audience(self, q_data):
        print("\nüë• Asking the audience...")
        time.sleep(2)
        
        # Generate audience percentages (correct answer gets higher percentage)
        if self.current_question < 5:
            correct_percent = random.randint(60, 85)
        else:
            correct_percent = random.randint(45, 70)
        
        remaining = 100 - correct_percent
        other_percents = []
        
        for i in range(3):
            if i == 2:
                other_percents.append(remaining)
            else:
                percent = random.randint(0, remaining // 2)
                other_percents.append(percent)
                remaining -= percent
        
        options = ["A", "B", "C", "D"]
        correct_idx = options.index(q_data["correct"])
        
        percentages = [0] * 4
        percentages[correct_idx] = correct_percent
        
        other_idx = 0
        for i in range(4):
            if i != correct_idx:
                percentages[i] = other_percents[other_idx]
                other_idx += 1
        
        print("\nAudience Results:")
        for i, option in enumerate(options):
            print(f"{option}: {'‚ñà' * (percentages[i] // 5)} {percentages[i]}%")

    def ask_question(self, level):
        questions_for_level = []
        
        # Collect questions from appropriate difficulty ranges
        if level <= 5:
            for q_level in range(1, min(level + 1, 4)):
                questions_for_level.extend(self.questions.get(q_level, []))
        elif level <= 10:
            for q_level in range(4, 7):
                questions_for_level.extend(self.questions.get(q_level, []))
        else:
            questions_for_level.extend(self.questions.get(11, []))
        
        if not questions_for_level:
            questions_for_level = self.questions[1]  # Fallback
        
        q_data = random.choice(questions_for_level)
        
        print(f"\nüé≤ Question {level} - Theme: {q_data['theme']}")
        print(f"üíµ Playing for: ${self.money_levels[level-1]:,}")
        print("\n" + q_data["question"])
        print()
        
        for answer in q_data["answers"]:
            print(answer)
        
        while True:
            print(f"\nYour answer (A/B/C/D), use Lifeline (L), or Walk Away (W): ", end="")
            user_input = input().upper().strip()
            
            if user_input == "W":
                return "walk"
            elif user_input == "L":
                if not self.use_lifeline(q_data):
                    continue
                print("\nNow, what's your answer? (A/B/C/D): ", end="")
                user_input = input().upper().strip()
            
            if user_input in ["A", "B", "C", "D"]:
                return user_input == q_data["correct"]
            else:
                print("Please enter A, B, C, D, L, or W")

    def play_game(self):
        self.display_title()
        
        print("Welcome to Who Wants to Be a Millionaire!")
        print("Answer 15 questions correctly to win $1,000,000!")
        print("You have three lifelines: 50/50, Phone a Friend, and Ask the Audience")
        print("You can walk away at any time with your current winnings.\n")
        
        input("Press Enter to start the game...")
        
        for level in range(1, 16):
            self.current_question = level - 1
            
            self.display_money_ladder()
            self.display_lifelines()
            
            result = self.ask_question(level)
            
            if result == "walk":
                self.current_winnings = self.money_levels[level-2] if level > 1 else 0
                print(f"\nüö∂ You decided to walk away with ${self.current_winnings:,}!")
                print("Thanks for playing!")
                return
            elif result:
                self.current_winnings = self.money_levels[level-1]
                print(f"\nüéâ Correct! You've won ${self.current_winnings:,}!")
                
                if level == 15:
                    print("\n" + "="*60)
                    print("üèÜ CONGRATULATIONS! YOU'RE A MILLIONAIRE! üèÜ")
                    print("üí∞ You've won $1,000,000! üí∞")
                    print("="*60)
                    return
                
                # Safe havens
                if level in [5, 10]:
                    print(f"üí™ You've reached a safe haven! You're guaranteed ${self.current_winnings:,}!")
                
                input("\nPress Enter for the next question...")
            else:
                # Wrong answer - determine winnings based on safe havens
                if level <= 5:
                    final_winnings = 0
                elif level <= 10:
                    final_winnings = 1000  # Safe haven at question 5
                else:
                    final_winnings = 32000  # Safe haven at question 10
                
                print(f"\n‚ùå Wrong answer! The correct answer was {self.get_correct_answer_text(level)}.")
                print(f"üíî You leave with ${final_winnings:,}.")
                print("Thanks for playing!")
                return

    def get_correct_answer_text(self, level):
        # This is a simplified version - in a real implementation, 
        # you'd want to track the correct answer from the question
        return "the correct option"

def main():
    game = MillionaireGame()
    
    while True:
        game = MillionaireGame()  # Reset game
        game.play_game()
        
        play_again = input("\nWould you like to play again? (y/n): ").lower()
        if play_again != 'y':
            print("\nThanks for playing Who Wants to Be a Millionaire!")
            break

if __name__ == "__main__":
    main()
